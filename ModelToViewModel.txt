<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="EnvDTE" #>
<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#
// insert your template code here the tempalte code will be syntaxhighlighted
// and you will have intellisense for all namespaces in the full edition
CodeClass codeClass = GetClass("Class1.cs");
if (codeClass != null)
{  
	   Debug.Print(codeClass.Name);
#>
using System;
using System.ComponentModel;
using System.Diagnostics.Contracts;
using GalaSoft.MvvmLight;
using <#= codeClass.Namespace.FullName #>;
 
namespace MyNameSpace
{
	   public class <#= codeClass.Name #>ViewModel : ViewModelBase
	   {
	  
			 private readonly <#= codeClass.Name #> _model;
			 public <#= codeClass.Name #>ViewModel (<#= codeClass.Name #> model)
			 {
					Contract.Assert( model != null);
					_model = model;
					_model.PropertyChanged+= (_,__) => RaisePropertyChanged();
			 }
			 
<#          
			 foreach(var x in codeClass.Members)
			 {
					var p = x as CodeProperty;
					Debug.Print("{0}:{1}", p.Name , p.Type.AsString); 
#>

			 public <#= p.Type.AsString #> <#= p.Name #>
			 {
					get
					{
						   return _model.<#= p.Name #>;
					}
					set
					{
						   _model.<#= p.Name #> = value;
						   RaisePropertyChanged(()=><#= p.Name #>);
					}
			 }                               
<#          
		}
	  
	  
	  
	  
#>
 }
}
 
<#
	   }     
#>
 
<#+
 // Insert any template procedures here
	  
 
 private CodeClass GetClass(string file)
 {
		 var dte = (DTE)TransformationContext.Current.GetService(typeof(DTE));
		ProjectItem projectItem = dte.Solution.FindProjectItem(file);
	   FileCodeModel codeModel = projectItem.FileCodeModel;
	   return FindClass(codeModel.CodeElements);
 }
 
  
 private CodeClass FindClass(CodeElements elements)
 {
	   foreach (CodeElement element in elements)
	   {
		CodeClass codeClass = element as CodeClass;
		if (codeClass != null) return codeClass;
		codeClass = FindClass(element.Children);
		if (codeClass != null) return codeClass;
	   }
	  
	   return null;
 }
	  
#>