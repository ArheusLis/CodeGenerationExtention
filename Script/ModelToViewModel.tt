<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="EnvDTE" #>
<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Shell.12.0" #>
<#@ Assembly Name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ Assembly name="EnvDTE" #> 
<#@ parameter name="codeClass" type="EnvDTE.CodeClass" #>
<#
if (codeClass != null)
{  
	   Debug.Print(codeClass.Name);
	var correctName = GetCorrectNewClassName(codeClass);
#>
using System;
using System.ComponentModel;
using System.Diagnostics.Contracts;
using GalaSoft.MvvmLight;
using <#= codeClass.Namespace.FullName #>;
 
namespace MyNameSpace
{
	   public class <#= correctName #> : ViewModelBase
	   {
	  
			 private readonly <#= codeClass.Name #> _model;
			 public <#= codeClass.Name #>ViewModel (<#= codeClass.Name #> model)
			 {
					Contract.Assert( model != null);
					_model = model;
					_model.PropertyChanged += ( _, e) => RaisePropertyChanged(e.PropertyName);
			 }
			 
<#          
		if(codeClass.Members != null )
			 foreach(var x in codeClass.Members)
			 {
					var p = x as CodeProperty;
					if (p != null && p.Access == vsCMAccess.vsCMAccessPublic)
						{		
							var propertyType = GetSimplifiedType(p);
#>

			 public <#= propertyType #> <#= p.Name #>
			 {
					get	{ return _model.<#= p.Name #>;	}
					<#
				    if (p.Setter!=null && p.Setter.Access == vsCMAccess.vsCMAccessPublic)
				    {
				        #>
					set
					{
						if(_model.<#= p.Name #> != value)						   
							{
							   _model.<#= p.Name #> = value;
							   RaisePropertyChanged(() => <#= p.Name #>);
							}
					}
					<#
				    }
					#>
			 }                               
<#          
						}
		}
	  
	  
	  
	  
#>
	   }
}
 
<#
}
#>
<#+
	private string GetSimplifiedType(CodeProperty p)
	{
		var compositeName = p.Type.AsString.Split('.');
		string propertyType = compositeName[compositeName.Length - 1];
		if (p.Type.AsString.Contains("<"))
		{
			var compositeType = p.Type.AsString.Split('<');
			var genericFullType = compositeType[0];
			var genericTypeName = genericFullType.Split('.');
			propertyType = genericTypeName[genericTypeName.Length - 1] + '<' + propertyType;
		}
		return propertyType;
	}

	private string GetCorrectNewClassName(CodeClass codeClass)
	{
		const string model = "Model";
		const string viewModel = "ViewModel";

		if (codeClass.Name.EndsWith(model))
			return codeClass.Name.Replace(model, "") + viewModel;

		return codeClass.Name + viewModel;
	}
#>

